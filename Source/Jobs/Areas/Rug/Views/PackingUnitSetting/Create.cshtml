@model Model.Models.PackingUnitSetting

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@using (Html.BeginForm("Post", "PackingUnitSetting", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.PackingUnitSettingId)
    @Html.HiddenFor(model => model.SiteId)
    @Html.HiddenFor(model => model.DivisionId)

    <div class="panel panel-default">

        <div class="panel-heading">

            <h3>
                <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> PackingUnitSetting</span>
                <input type="submit" value="Save" class="btn btn-primary right" id="submit" style="width: 90px; background-color: #2980b9" />
            </h3>
            <hr style="margin-top:0px;margin-bottom:0px" />

            <div class="panel-info">
                <div class="btn-group">
                    @Html.ActionLink(" ", "Create", "PackingUnitSetting", null, new { @class = "cbtn btn-circle glyphicon glyphicon-plus toolbar", @title = "Add New", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "PrevPage", "PackingUnitSetting", new { id = @Model.PackingUnitSettingId }, new { @class = "cbtn btn-circle glyphicon glyphicon-arrow-left toolbar", @title = "Prev Record", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "NextPage", "PackingUnitSetting", new { id = @Model.PackingUnitSettingId }, new { @class = "cbtn btn-circle glyphicon glyphicon-arrow-right toolbar", @title = "Next Record", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "History", "PackingUnitSetting", null, new { @class = "cbtn btn-circle glyphicon glyphicon-user toolbar", @title = "History", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "Index", "PackingUnitSetting", null, new { @class = "cbtn btn-circle glyphicon glyphicon-list", @title = "List", @data_toggle = "tooltip" })
                </div>
                <div class="btn-group">
                    <a class="cbtn btn-circle glyphicon glyphicon-option-horizontal dropdown-toggle" aria-expanded="false" style="padding-top: 6px;padding-bottom: 6px;" href="#" data-toggle="dropdown" id="dropdownMenu1">
                    </a>
                    <ul class="dropdown-menu pull-right" aria-labelledby="dropdownMenu1">
                        <li><a href="@Url.Action("Email", "PackingUnitSetting")"><span class="glyphicon glyphicon-envelope"> </span> Email</a></li>
                        <li role="separator" class="divider"></li>
                        <li><a target="_blank" href="@Url.Action("Report", "PackingUnitSetting")"><span class="glyphicon glyphicon-stats"> </span> Report</a></li>
                    </ul>
                </div>
            </div>

        </div>
        <div class="panel-info" style="padding-left:15px">

            <div class="form-horizontal">
                
                @Html.ValidationSummary(true)


                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group" style="margin-top:15px">
                            @Html.LabelFor(model => model.ProductCategoryId, "Category", new { @class = "control-label  col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(m => m.ProductCategoryId, null, new { @class = "form-control col-xs-6 required" })
                                @Html.ValidationMessageFor(model => model.ProductCategoryId, null, new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group" style="margin-top:15px">
                            @Html.LabelFor(model => model.ProductQualityId, "Quality", new { @class = "control-label  col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(m => m.ProductQualityId, null, new { @class = "form-control col-xs-6" })
                                @Html.ValidationMessageFor(model => model.ProductQualityId, null, new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group" style="margin-top:15px">
                            @Html.LabelFor(model => model.ProductGroupId, "Group", new { @class = "control-label  col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(m => m.ProductGroupId, null, new { @class = "form-control col-xs-6 " })
                                @Html.ValidationMessageFor(model => model.ProductGroupId, null, new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group" style="margin-top:15px">
                            @Html.LabelFor(model => model.SizeId, "Size", new { @class = "control-label  col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(m => m.SizeId, null, new { @class = "form-control col-xs-6 required" })
                                @Html.ValidationMessageFor(model => model.SizeId, null, new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>


                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group" style="margin-top:15px">
                            @Html.LabelFor(model => model.PackingLength, "Length", new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(m => m.PackingLength, null, new { @class = "form-control col-xs-6 required" })
                                @Html.ValidationMessageFor(model => model.PackingLength, null, new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group" style="margin-top:15px">
                            @Html.LabelFor(model => model.PackingWidth, "Width", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(m => m.PackingWidth, null, new { @class = "form-control col-xs-6 required" })
                                @Html.ValidationMessageFor(model => model.PackingWidth, null, new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group" style="margin-top:15px">
                            @Html.LabelFor(model => model.PackingHeight, "Height", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(m => m.PackingHeight, null, new { @class = "form-control col-xs-6 required" })
                                @Html.ValidationMessageFor(model => model.PackingHeight, null, new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group" style="margin-top:15px">
                            @Html.LabelFor(model => model.PackingUnitId, "Unit", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(m => m.PackingUnitId, null, new { @class = "form-control col-xs-6 required" })
                                @Html.ValidationMessageFor(model => model.PackingUnitId, null, new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group" style="margin-top:15px">
                            @Html.LabelFor(model => model.PackingGrossWeight, "Gross Weight", new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(m => m.PackingGrossWeight, null, new { @class = "form-control col-xs-6 " })
                                @Html.ValidationMessageFor(model => model.PackingGrossWeight, null, new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group" style="margin-top:15px">
                            @Html.LabelFor(model => model.PackingNetWeight, "Net Weight", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(m => m.PackingNetWeight, null, new { @class = "form-control col-xs-6 " })
                                @Html.ValidationMessageFor(model => model.PackingNetWeight, null, new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
}


<script type="text/javascript">

    $(document).ready(function () {

        CustomSelectFunction($("#ProductCategoryId"), '/ComboHelpList/GetProductConstruction', '/ComboHelpList/SetSingleProductConstruction', ' ', false, 0);
        CustomSelectFunction($("#ProductQualityId"), '/ComboHelpList/GetRugQuality', '/ComboHelpList/SetSingleRugQuality', ' ', false, 0);
        CustomSelectFunction($("#ProductGroupId"), '/ComboHelpList/GetProductGroupForRug', '/ComboHelpList/SetSingleProductGroup', ' ', false, 0);
        CustomSelectFunction($("#SizeId"), '/ComboHelpList/GetProductSize', '/ComboHelpList/SetSingleSize', ' ', false, 0);
        CustomSelectFunction($("#PackingUnitId"), '/ComboHelpList/GetUnits', '/ComboHelpList/SetSingleUnit', ' ', false, 0);

        form_clean = $("form").serialize();




    //For posting the data through ajax and render the contents sent back from the server
    function bindForm1(dialog) {
        $('form', dialog).submit(function () {
            //alert('inside test');
            $.ajax({
                url: this.action,
                type: this.method,
                data: $(this).serialize(),
                success: function (result) {
                    if (result.success) {
                        $('#myModal').modal('hide');
                        //Refresh
                        //location.reload();
                        //alert('Data Saved');
                    }else if(!result.success)
                    {
                        $('#myModalContent').html(result);
                        bindForm1();
                    }
                    else {
                        $('#myModalContent').html(result);
                        bindForm1();
                    }
                }
            });
            return false;
        });

    }

    $(document).ready(function(){
        enableModalTransitions();
    })
    });

</script>


<script type="text/javascript">
    $(function()
    {
        var TitleCase= '@Session["TitleCase"]';
        $('#PackingUnitSettingName').focusout(function() {
            if (TitleCase=="UpperCase")
            this.value = this.value.toUpperCase() ;
    });
    });
</script>

<script type="text/javascript">

     $(":submit").on("click", function () {
         var mpoid=@Model.PackingUnitSettingId;
         var tes;
         if(mpoid<=0)
         {
             tes= $('#PackingUnitSettingName').DuplicateCheckForCreate({ name: 'PackingUnitSetting', value: $('#PackingUnitSettingName').val(), doctype: 0 });
         }
         else
         {
             tes = $('#PackingUnitSettingName').DuplicateCheckForEdit({ name: 'PackingUnitSetting', value: $('#PackingUnitSettingName').val(), doctype: 0,headerId:mpoid });
         }
         if (tes) {
             return false;
         }
         else
         {
             return;
         }
     });

</script>

