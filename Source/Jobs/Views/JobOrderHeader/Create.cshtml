@model Model.ViewModel.JobOrderHeaderViewModel
@using Core.Common
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- modal placeholder-->
<div id='myModal' class='modal fade in'>
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div id='myModalContent'></div>
        </div>
    </div>
</div>

@using (Html.BeginForm("Post", "JobOrderHeader", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.SiteId)
    @Html.HiddenFor(m => m.Status)
    @Html.HiddenFor(m => m.DivisionId)
    @Html.HiddenFor(m => m.JobOrderHeaderId)
    @Html.HiddenFor(m => m.DocTypeId)
    @*@Html.HiddenFor(m => m.ProcessId)*@
    @Html.HiddenFor(m => m.CreatedDate)
    @Html.HiddenFor(m => m.CalculationFooterChargeCount)
    @Html.HiddenFor(m => m.JobOrderSettings.ProcessId)
    @Html.HiddenFor(m => m.JobOrderSettings.isUniqueCostCenter)
    @Html.HiddenFor(m => m.JobOrderSettings.isVisibleFromProdOrder)

    <div class="panel panel-default">
        <div class="panel-heading">

            @CustomHelpers.RenderResHeaderInfo(ViewBag.transactionType, (int?)ViewBag.PendingToSubmit, (int?)ViewBag.PendingToReview, ViewBag.Name)
            <hr style="margin-top: 5px; margin-bottom: 5px; border-top: 1px solid #d8d5d5" />

            @{
                string EditAction = "";
                if (Model.Status == (int)StatusConstants.Drafted || Model.Status == (int)StatusConstants.Import)
                {
                    EditAction = "Modify";
                }
                else if ((Model.Status == (int)StatusConstants.Submitted || Model.Status == (int)StatusConstants.Modified))
                {
                    EditAction = "ModifyAfter_Submit";
                }
                else
                {
                    EditAction = "DetailInformation";
                }
             }

            <div class="panel-info">
                <div class="btn-group">
                    @Html.ActionLink(" ", "Create", "JobOrderHeader", new { @id = @ViewBag.id }, new { @class = "cbtn btn-circle glyphicon glyphicon-plus", @title = "Add New", @data_toggle = "tooltip" })
                    @if (Model.JobOrderHeaderId > 0)
                    {
                    @Html.ActionLink(" ", EditAction, "JobOrderHeader", new { @id = Model.JobOrderHeaderId, IndexType = ViewBag.IndexStatus }, new { @class = "cbtn btn-circle glyphicon glyphicon-edit", @title = "Edit", @data_toggle = "tooltip" })
                    }
                    @if (Model.JobOrderHeaderId > 0)
                    {
                    @Html.ActionLink(" ", "GeneratePrints", "JobOrderHeader", new { Ids = Model.JobOrderHeaderId, DocTypeId = Model.DocTypeId }, new { @class = "cbtn btn-circle glyphicon glyphicon-print", @title = "Print", @data_toggle = "tooltip", @id = "PrintRecordC", target = "_blank" })
                    }
                    @Html.ActionLink(" ", "PrevPage", "JobOrderHeader", new { DocId = @Model.JobOrderHeaderId, DocTypeId = Model.DocTypeId }, new { @class = "cbtn btn-circle glyphicon glyphicon-arrow-left", @title = "Prev Record", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "NextPage", "JobOrderHeader", new { DocId = @Model.JobOrderHeaderId, DocTypeId = Model.DocTypeId }, new { @class = "cbtn btn-circle glyphicon glyphicon-arrow-right", @title = "Next Record", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "Index", "JobOrderHeader", new { id = ViewBag.id, IndexType = ViewBag.IndexStatus }, new { @class = "cbtn btn-circle glyphicon glyphicon-list", @title = "List", @data_toggle = "tooltip" })
                </div>
                <div class="btn-group">
                    <a class="cbtn btn-circle glyphicon glyphicon-option-horizontal dropdown-toggle" title="More Option" aria-expanded="false" style="padding-top: 6px;padding-bottom: 6px;" href="#" data-toggle="dropdown" id="dropdownMenu1">
                    </a>
                    <ul class="dropdown-menu pull-right" aria-labelledby="dropdownMenu1">
                        @if (@Model.JobOrderSettings.SqlProcGenProductUID != null)
                        {
                            <li><a target="_blank" href="@Url.Action("BarcodePrint", "JobOrderHeader", new { id = Model.JobOrderHeaderId })"><span class="glyphicon glyphicon-barcode"> </span> Barcodes Print</a></li>
                        }
                        @if (Model.Status == (int)StatusConstants.Submitted && !Model.GatePassHeaderId.HasValue)
                        {
                            <li><a id="GenGatePassC" href="@Url.Action("GenerateGatePass", "JobOrderHeader", new { Ids = @Model.JobOrderHeaderId, DocTypeId = Model.DocTypeId })"><span class="glyphicon glyphicon-log-out"> </span> Generate Gatepass</a></li>
                        }
                        @if (Model.JobOrderHeaderId > 0)
                        {
                        <li><a id="DocHistory" data-modal="" href="@Url.Action("GetHistory", "LogHistory", new { Ids = Model.JobOrderHeaderId, DocTypeId = Model.DocTypeId })"><span class="glyphicon glyphicon-user"> </span> History</a></li>
                        }
                        <li><a href="@Url.Action("Email", "JobOrderHeader")"><span class="glyphicon glyphicon-envelope"> </span> Email</a></li>
                        <li role="separator" class="divider"></li>
                        <li><a target="_blank" href="@Url.Action("Report", "JobOrderHeader", new { @ViewBag.id })"><span class="glyphicon glyphicon-th"> </span> Report</a></li>
                        <li><a target="_blank" id="TimeExtensionRequest" href="@Url.Action("DirectCreate", "DocumentTypeTimeExtensionRequest", new { SiteId = @Model.SiteId, DivisionId = @Model.DivisionId, DocTypeId = Model.DocTypeId, DocDate= Model.DocDate })"><span class="glyphicon glyphicon-pencil"> </span> Time Extension Request</a></li>
                    </ul>
                </div>

            </div>
        </div>

        <div class="panel-info" style="padding-left:15px">

            <div class="form-horizontal">

                @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })
                <div>
                    <h4 class="col-md-12 black">
                        <span class="glyphicon glyphicon-align-justify"></span>
                        1.Order Details
                        @if (Model.GatePassHeaderId.HasValue)
                        {
                            <span class="label label-danger right">
                                <span class="glyphicon glyphicon-log-out"></span>
                                GPNo:@Model.GatePassDocNo,GPDate:@Model.GatePassDocDate.Value.ToString("dd/MMM/yyyy")
                                @Html.ActionLink(" ", "DeleteGatePass", "JobOrderHeader", new { Id = @Model.JobOrderHeaderId }, new { @class = "glyphicon glyphicon-remove", @title = "GatePass", @data_toggle = "tooltip", @id = "GenGatePassD", @style = "color:white;opacity:0.4" })
                            </span>
                        }   
                    </h4>
                    <div>
                        <div>
                            <div class="col-md-6">
                                <div class="form-group" style="margin-top:15px">
                                    @Html.LabelFor(model => model.DocDate, "Order Date", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.DocDate, "{0:dd/MMMM/yyyy}", new
                                   {
                                       @class = "datepickerWithNFD form-control col-xs-6 required updateDocNo",
                                       data_tabl = "JobOrderHeaders",
                                       data_doctype = Model.DocTypeId,
                                       data_divId = Model.DivisionId,
                                       data_sitId = Model.SiteId,
                                   })
                                        @Html.ValidationMessageFor(model => model.DocDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>


                            <div class="col-md-6">
                                <div class="form-group" style="margin-top:15px">
                                    @Html.LabelFor(model => model.DocNo, "Order No", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.DocNo, null, new { @class = "form-control required" })
                                        @Html.ValidationMessageFor(m => m.DocNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DueDate, "Due Date", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.DueDate, "{0:dd/MMMM/yyyy}", new { @class = "datepicker form-control required" })
                                        @Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6" style='display:@(Model.JobOrderSettings.isVisibleProcessHeader?"":"none")'>
                                <div class="form-group">
                                    @Html.HiddenFor(m => m.JobOrderSettings.isVisibleProcessHeader)
                                    @Html.LabelFor(model => model.ProcessId, "Process", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.ProcessId, new { @class = "form-control " + (Model.JobOrderSettings.isMandatoryMachine ? " required" : "") })
                                        @Html.ValidationMessageFor(m => m.ProcessId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.JobWorkerId, (Model.DocumentTypeSettings.PartyCaption ?? "Party"), new { @class = "control-label col-md-4 col-sm-2" })
                                    @Html.HiddenFor(m => m.DocumentTypeSettings.PartyCaption)
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.JobWorkerId, new { @class = "form-control required" })
                                        @Html.ValidationMessageFor(model => model.JobWorkerId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>


                            <div class="col-md-6" style='display:@(Model.JobOrderSettings.isVisibleMachine?"":"none")'>
                                <div class="form-group">
                                    @Html.HiddenFor(m => m.JobOrderSettings.isMandatoryMachine)
                                    @Html.HiddenFor(m => m.JobOrderSettings.isVisibleMachine)
                                    @Html.LabelFor(model => model.MachineId, "Machine", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.MachineId, new { @class = "form-control " + (Model.JobOrderSettings.isMandatoryMachine ? " required" : "") })
                                        @Html.ValidationMessageFor(m => m.MachineId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6" style='display:@(Model.JobOrderSettings.isVisibleBillToParty?"":"none")'>
                                <div class="form-group">
                                    @Html.HiddenFor(m => m.JobOrderSettings.isVisibleBillToParty)
                                    @Html.LabelFor(model => model.BillToPartyId, "Billing A/C", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.BillToPartyId, new { @class = "form-control required" })
                                        @Html.ValidationMessageFor(m => m.BillToPartyId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>



                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.OrderById, "Order By", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.OrderById, new { @class = "form-control required" })
                                        @Html.ValidationMessageFor(m => m.OrderById, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6" style='display:@(Model.JobOrderSettings.isVisibleGodown?"":"none")'>
                                @Html.HiddenFor(m => m.JobOrderSettings.isVisibleGodown)
                                @Html.HiddenFor(m => m.JobOrderSettings.isMandatoryGodown)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.GodownId, "Godown", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.GodownId, new { @class = "form-control " + (Model.JobOrderSettings.isMandatoryGodown == true ? "required" : "") })
                                        @Html.ValidationMessageFor(m => m.GodownId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6" style='display:@(Model.JobOrderSettings.isVisibleCostCenter?"":"none")'>
                                @Html.HiddenFor(m => m.JobOrderSettings.isVisibleCostCenter)
                                <div class="form-group">
                                    @Html.HiddenFor(m => m.JobOrderSettings.isMandatoryCostCenter)
                                    @Html.LabelFor(model => model.CostCenterName, "Cost Center", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.CostCenterName, new { @class = "form-control " + (Model.JobOrderSettings.isMandatoryCostCenter ? " required" : "") })
                                        @Html.ValidationMessageFor(m => m.CostCenterName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6" style='display:@(Model.JobOrderSettings.isVisibleCreditDays?"":"none")'>
                                @Html.HiddenFor(m => m.JobOrderSettings.isVisibleCreditDays)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CreditDays, "Credit Days", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.CreditDays, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.CreditDays, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>


                            <div class="col-md-6" style='display:@(Model.JobOrderSettings.isVisibleUnitConversionFor?"":"none")'>
                                @Html.HiddenFor(m => m.JobOrderSettings.isVisibleUnitConversionFor)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.UnitConversionForId, "Unit Conversion For", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.DropDownListFor(m => m.UnitConversionForId, new SelectList(ViewBag.UnitConvForList as System.Collections.IEnumerable, "UnitConversionForId", "UnitConversionForName"), new { @class = "form-control height" })
                                        @Html.ValidationMessageFor(m => m.UnitConversionForId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>


                            <div class="col-md-6" style='display:@(Model.JobOrderSettings.isVisibleDeliveryTerms?"":"none")'>
                                @Html.HiddenFor(m => m.JobOrderSettings.isVisibleDeliveryTerms)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DeliveryTermsId, "Price Mode", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.DeliveryTermsId, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.DeliveryTermsId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6" style='display:@(Model.JobOrderSettings.isVisibleShipToAddress?"":"none")'>
                                @Html.HiddenFor(m => m.JobOrderSettings.isVisibleShipToAddress)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ShipToAddressId, "Ship To Address", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.ShipToAddressId, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.ShipToAddressId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>


                            <div class="col-md-6" style='display:@(Model.JobOrderSettings.isVisibleCurrency?"":"none")'>
                                @Html.HiddenFor(m => m.JobOrderSettings.isVisibleCurrency)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CurrencyId, "Currency", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.CurrencyId, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.CurrencyId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6" style='display:@(Model.JobOrderSettings.isVisibleSalesTaxGroupPerson?"":"none")'>
                                @Html.HiddenFor(m => m.JobOrderSettings.isVisibleSalesTaxGroupPerson)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.SalesTaxGroupPersonId, "Sales Tax Group Person", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.SalesTaxGroupPersonId, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.SalesTaxGroupPersonId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>


                            <div class="col-md-6" style='display:@(Model.JobOrderSettings.isVisibleShipMethod?"":"none")'>
                                @Html.HiddenFor(m => m.JobOrderSettings.isVisibleShipMethod)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ShipMethodId, "Ship Method", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.ShipMethodId, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.ShipMethodId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>


                            <div class="col-md-6" style='display:@(Model.JobOrderSettings.isVisibleDocumentShipMethod?"":"none")'>
                                @Html.HiddenFor(m => m.JobOrderSettings.isVisibleDocumentShipMethod)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DocumentShipMethodId, "Doc Ship Method", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.DocumentShipMethodId, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.DocumentShipMethodId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>



                            <div class="col-md-6" style='display:@(Model.JobOrderSettings.isVisibleTransporter?"":"none")'>
                                @Html.HiddenFor(m => m.JobOrderSettings.isVisibleTransporter)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.TransporterId, "Transporter", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.TransporterId, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.TransporterId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>


                            <div class="col-md-6" style='display:@(Model.JobOrderSettings.isVisibleReason?"":"none")'>
                                @Html.HiddenFor(m => m.JobOrderSettings.isVisibleReason)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ReasonId, "Reason", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.ReasonId, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.ReasonId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>



                            <div class="col-md-6" style='display:@(Model.JobOrderSettings.isVisibleAgent?"":"none")'>
                                @Html.HiddenFor(m => m.JobOrderSettings.isVisibleAgent)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.AgentId, "Agent", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.AgentId, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.AgentId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6" style='display:@(Model.JobOrderSettings.isVisibleFinancier?"":"none")'>
                                @Html.HiddenFor(m => m.JobOrderSettings.isVisibleFinancier)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.FinancierId, "Supplier Code", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.FinancierId, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.FinancierId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>


                            <div class="col-md-6" style='display:@(Model.JobOrderSettings.isVisibleSalesExecutive?"":"none")'>
                                @Html.HiddenFor(m => m.JobOrderSettings.isVisibleSalesExecutive)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.SalesExecutiveId, "Sales Executive", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.SalesExecutiveId, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.SalesExecutiveId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            @if (Model.DocumentTypeHeaderAttributes != null)
                                {
                                    for (int i = 0; i < Model.DocumentTypeHeaderAttributes.Count; i++)
                                    {
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                @Html.Label(Model.DocumentTypeHeaderAttributes[i].Name, new { @class = "control-label col-md-4 col-sm-2" })
                                                @Html.HiddenFor(m => Model.DocumentTypeHeaderAttributes[i].Name)
                                                @Html.HiddenFor(m => Model.DocumentTypeHeaderAttributes[i].DocumentTypeHeaderAttributeId)
                                                @if (Model.DocumentTypeHeaderAttributes[i].DataType == "List")
                                                {
                                                    List<SelectListItem> tem = new List<SelectListItem>();
                                                    foreach (string item in (Model.DocumentTypeHeaderAttributes[i].ListItem).Split(',').ToList())
                                                    {
                                                        tem.Add(new SelectListItem { Text = item, Value = item, Selected = (Model.DocumentTypeHeaderAttributes[i].Value == item ? true : false) });
                                                    }

                                                    <div class="col-md-7 col-sm-10">
                                                        @Html.DropDownListFor(m => Model.DocumentTypeHeaderAttributes[i].Value, new SelectList(tem as System.Collections.IEnumerable, "Value", "Text", Model.DocumentTypeHeaderAttributes[i].Value), " ", new { @class = "form-control col-xs-6 height" })
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="col-md-7 col-sm-10">
                                                        @Html.TextBoxFor(m => Model.DocumentTypeHeaderAttributes[i].Value, new { @class = "form-control col-xs-6" })
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                }



                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.TermsAndConditions, "Terms & Conditions", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextAreaFor(m => m.TermsAndConditions, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.TermsAndConditions, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Remark, "Remark", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextAreaFor(m => m.Remark, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.Remark, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6" style='display:@(Model.JobOrderSettings.isVisibleDoorDelivery?"":"none")'>
                                @Html.HiddenFor(m => m.JobOrderSettings.isVisibleDoorDelivery)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.IsDoorDelivery, "Is Door Delivery", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.CheckBoxFor(m => m.IsDoorDelivery, new { @class = "checkbox col-xs-2" })
                                        @Html.ValidationMessageFor(m => m.IsDoorDelivery, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                        </div>

                    </div>
                </div>






                @Html.HiddenFor(m => m.JobOrderSettings.isVisiblePaymentTerms)
                @if (Model.JobOrderSettings.isVisiblePaymentTerms == true)
                {
                    <hr />
                    <div class="row">
                        <h4 class="col-md-12 black" style="margin-top:15px">
                            <span class="glyphicon glyphicon-align-justify"></span>
                            Payment Terms
                        </h4>
                    </div>

                    <div style="padding-right:15px">
                        <div class="row">
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PayTermAdvancePer, "Advance %", new { @class = "control-label col-xs-8" })
                                    <div class="col-xs-4">
                                        @Html.TextBoxFor(m => m.PayTermAdvancePer, new { @class = "form-control col-xs-3" })
                                        @Html.ValidationMessageFor(m => m.PayTermAdvancePer, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PayTermOnDeliveryPer, "On Delivery %", new { @class = "control-label col-xs-8" })
                                    <div class="col-xs-4">
                                        @Html.TextBoxFor(m => m.PayTermOnDeliveryPer, new { @class = "form-control col-xs-3" })
                                        @Html.ValidationMessageFor(m => m.PayTermOnDeliveryPer, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PayTermOnDueDatePer, "On Due Date %", new { @class = "control-label col-xs-8" })
                                    <div class="col-xs-4">
                                        @Html.TextBoxFor(m => m.PayTermOnDueDatePer, new { @class = "form-control col-xs-3" })
                                        @Html.ValidationMessageFor(m => m.PayTermOnDueDatePer, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PayTermCashPer, "Cash %", new { @class = "control-label col-xs-8" })
                                    <div class="col-xs-4">
                                        @Html.TextBoxFor(m => m.PayTermCashPer, new { @class = "form-control col-xs-3" })
                                        @Html.ValidationMessageFor(m => m.PayTermCashPer, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PayTermBankPer, "Bank %", new { @class = "control-label col-xs-8" })
                                    <div class="col-xs-4">
                                        @Html.TextBoxFor(m => m.PayTermBankPer, new { @class = "form-control col-xs-3" })
                                        @Html.ValidationMessageFor(m => m.PayTermBankPer, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                


                @if (Model.PerkViewModel != null && Model.PerkViewModel.Count > 0)
                {
                    <hr />
                    <div class="row">
                        <h4 class="col-md-12 black" style="margin-top:15px">
                            <span class="glyphicon glyphicon-share"></span>
                            2.Perks
                        </h4>
                    </div>

                    <div style="padding-right:15px">

                        @for (int i = 0; i < Model.PerkViewModel.Count; i++)
                        {
                            <div class="row">
                                <div class="col-md-3">
                                    <h4 style="color:#342c26;padding-left:20px" class="caption">@Model.PerkViewModel[i].PerkName :</h4>
                                </div>

                                <div class="col-md-4" style="display: @(  (@Model.PerkViewModel[i].BaseDescription == null || @Model.PerkViewModel[i].BaseDescription == "") ? "none" : "")">
                                    <div class="form-group">
                                        @Html.LabelFor(model => @Model.PerkViewModel[i].BaseDescription, @Model.PerkViewModel[i].BaseDescription, new { @class = "control-label col-xs-8" })
                                        <div class="col-xs-4">
                                            @Html.TextBoxFor(m => m.PerkViewModel[i].Base, new { @class = "form-control col-xs-3" })
                                            @Html.ValidationMessageFor(m => m.PerkViewModel[i].Base, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4" style="display: @(  (@Model.PerkViewModel[i].WorthDescription == null || @Model.PerkViewModel[i].WorthDescription == "") ? "none" : "")">
                                    <div class="form-group">
                                        @Html.LabelFor(model => @Model.PerkViewModel[i].WorthDescription, @Model.PerkViewModel[i].WorthDescription, new { @class = "control-label col-xs-8" })
                                        <div class="col-xs-4">
                                            @if (Model.JobOrderHeaderId > 0 && !Model.PerkViewModel[i].IsEditableRate)
                                            {
                                                @Html.TextBoxFor(m => m.PerkViewModel[i].Worth, new { @class = "form-control col-xs-3", @readonly = "true" })
                                                @Html.ValidationMessageFor(m => m.PerkViewModel[i].Worth, "", new { @class = "text-danger" })
                                            }
                                            else
                                            {
                                                @Html.TextBoxFor(m => m.PerkViewModel[i].Worth, new { @class = "form-control col-xs-3" })
                                                @Html.ValidationMessageFor(m => m.PerkViewModel[i].Worth, "", new { @class = "text-danger" })
                                            }
                                        </div>
                                    </div>
                                </div>
                                @Html.HiddenFor(m => @Model.PerkViewModel[i].CostConversionMultiplier)
                                @Html.HiddenFor(m => @Model.PerkViewModel[i].PerkName)
                                @Html.HiddenFor(m => @Model.PerkViewModel[i].BaseDescription)
                                @*@Html.HiddenFor(m => @Model.PerkViewModel[i].Base)*@
                                @Html.HiddenFor(m => @Model.PerkViewModel[i].WorthDescription)
                                @*@Html.HiddenFor(m => @Model.PerkViewModel[i].Worth)*@
                                @Html.HiddenFor(m => @Model.PerkViewModel[i].JobOrderPerkId)
                                @Html.HiddenFor(m => @Model.PerkViewModel[i].JobOrderHeaderId)
                                @Html.HiddenFor(m => @Model.PerkViewModel[i].PerkId)
                                @Html.HiddenFor(m => @Model.PerkViewModel[i].IsEditableRate)
                            </div>

                        }
                    </div>
                }


                <hr />

                <div class="row">
                    <h4 class="col-md-12 black" style="margin-top:15px">
                        <span class="glyphicon glyphicon-shopping-cart"></span>
                        3.Products
                    </h4>
                </div>

                <div class="panel-info" style="height:40px">
                    <div class="btn-group" style="padding:5px 0 3px 0;margin:0px;font-weight:bold">
                        <span class="glyphicon glyphicon-plus-sign"></span>
                        @{string Action = "";
                        if (Model.Status == (int)StatusConstants.Drafted || Model.Status == (int)StatusConstants.Import)
                        { Action = "CreateLine"; }
                        else if (Model.Status == (int)StatusConstants.Submitted || Model.Status == (int)StatusConstants.Modified)
                        { Action = "CreateLineAfter_Submit"; }
                        }
                        @if (Model.JobOrderSettings.isVisibleFromProdOrder)
                        {
                            @Html.ActionLink("For " + (Model.DocumentTypeSettings.ContraDocTypeCaption ?? "Production Order") + "/", Action, "JobOrderLine", new { id = @Model.JobOrderHeaderId, LineNature = LineNatureConstants.ForOrder }, new { data_modal = "", id = "btnCreate", @class = "toolbar", @title = "Add New", @data_toggle = "tooltip", @data_detailDisabled = "true" })
                        }
                        @Html.ActionLink("Add New Row ", Action, "JobOrderLine", new { id = @Model.JobOrderHeaderId, IsProdBased = false }, new { data_modal = "", id = "btnCreatePO", @class = "toolbar", @title = "Add New", @data_toggle = "tooltip", @data_detailDisabled = "true" })
                    </div>
                    <div class="btn-group right" style="padding-right:15px">
                        @if (Model.JobOrderSettings.isVisibleFromProdOrder)
                        {
                            @Html.ActionLink(" ", "_ForProdOrder", "JobOrderLine", new { id = @Model.JobOrderHeaderId, jid = @Model.JobWorkerId, LineNature = LineNatureConstants.ForOrder }, new { data_modal = "", id = "btnCreateF", @class = "cbtn btn-circle glyphicon glyphicon-link toolbar right", @title = "For ProductionOrder", @data_toggle = "tooltip", @data_detailDeleted = "true" })
                        }
                        @if (Model.JobOrderSettings.isVisibleStockIn)
                        {
                            @Html.ActionLink(" ", "_ForStockIn", "JobOrderLine", new { id = @Model.JobOrderHeaderId, jid = @Model.JobWorkerId }, new { data_modal = "", id = "btnCreateF", @class = "cbtn btn-circle glyphicon glyphicon-link toolbar right", @title = "For ProductionOrder", @data_toggle = "tooltip", @data_detailDeleted = "true" })
                        }
                    </div>
                </div>

                <div style="padding-right:15px;">

                    <div class="panel panel-default" id="grid">

                        <div style="min-width: 700px;">

                            <div class="panel-info" id="gbody">

                            </div>
                        </div>
                    </div>


                    <div class="panel panel-default" id="gridcharges">

                    </div>
                </div>



                @if (!string.IsNullOrEmpty(Model.JobOrderSettings.SqlProcConsumption))
                {

                    <div class="row">
                        <h4 class="col-md-12 black" style="margin-top:15px">
                            <span class="glyphicon glyphicon-shopping-cart"></span>
                            4.Consumption
                        </h4>
                    </div>

                    <div class="panel-info">
                        <h5 style="padding:5px 0 3px 0;margin:0px;font-weight:bold">
                            <span class="glyphicon glyphicon-plus-sign"></span>
                            @Html.ActionLink("Add New Row ", "_Create", "JobOrderLine", new { id = @Model.JobOrderHeaderId }, new { data_modal = "", id = "btnCreatePO", @class = "toolbar", @title = "Add New", @data_toggle = "tooltip", @data_detailDisabled = "true" })
                        </h5>
                    </div>
                    <div style="padding-right:15px">



                        <div class="panel panel-default" id="grid">

                            <div class="panel-heading headrow">
                                <div class="row grid-head">
                                    <div class="text-left block" style="width: 5%; ">
                                        Srl.
                                    </div>
                                    <div class="block" style="width: 90%;" >
                                        <div class="row">
                                            <div class="block" style="width: 60%; ">
                                                Product Name
                                            </div>
                                            <div class="text-right block" style="width: 25%;">
                                                Qty
                                            </div>
                                            <div class="block" style="width: 15%; ">
                                                Unit
                                            </div>
                                        </div>
                                    </div>


                                    <div class="" style="width:5%">

                                    </div>
                                </div>

                            </div>


                            <div class="panel-info" id="gbodyconsumption">


                            </div>
                        </div>

                    </div>


                }




                @if (Model.JobOrderSettings.isAllowedToMaterialIssue == true)
                {

                    <div class="row">
                        <h4 class="col-md-12 black" style="margin-top:15px">
                            <span class="glyphicon glyphicon-shopping-cart"></span>
                            5.Material Issue
                        </h4>
                    </div>

                    <div class="panel-info">
                        <h5 style="padding:5px 0 3px 0;margin:0px;font-weight:bold">
                            <span class="glyphicon glyphicon-plus-sign"></span>
                            @Html.ActionLink("Add New Row ", "_Create", "MaterialIssueForJobOrder", new { id = @Model.JobOrderHeaderId }, new { data_modal = "", id = "btnCreatePO", @class = "toolbar", @title = "Add New", @data_toggle = "tooltip", @data_detailDisabled = "true" })
                        </h5>
                    </div>
                    <div style="padding-right:15px">
                        <div class="panel panel-default" id="grid">
                            <div class="panel-heading headrow">
                                <div class="row grid-head">
                                    <div class="text-left block" style="width: 5%; ">
                                        Srl.
                                    </div>
                                    <div class="block" style="width: 90%;">
                                        <div class="row">
                                            <div class="block" style="width: 60%; ">
                                                Product Name
                                            </div>
                                            <div class="text-right block" style="width: 25%;">
                                                Qty
                                            </div>
                                            <div class="block" style="width: 15%; ">
                                                Unit
                                            </div>
                                        </div>
                                    </div>


                                    <div class="" style="width:5%">

                                    </div>
                                </div>

                            </div>


                            <div class="panel-info" id="gbodyMaterialIssue">


                            </div>
                        </div>

                    </div>


                }


            </div>
        </div>
    </div>
}


@if ((ViewBag.Mode == "Add") || (ViewBag.Mode == "Edit"))
{

    <script type="text/javascript">

        $('#JobWorkerId').change(function () {

            var cid = $("#JobWorkerId").val();
            var cdata = $('#JobWorkerId').select2('data').text;
            $("#BillToPartyId").select2('data', { id: cid, text: cdata });
        });

        //Reloading the table contents on modal hide
        $('#myModal').on('hidden.bs.modal', function () {

            LoadProducts();

            if('@Model.JobOrderSettings.isAllowedToMaterialIssue'=="True")
            {
                LoadMaterialIssue();
            }

            var id='@Model.JobOrderHeaderId';
            var CalculationFooterChargeCount='@Model.CalculationFooterChargeCount';
            if (CalculationFooterChargeCount > 0)
            {
                LoadNewCharges(id,"Web.JobOrderHeaderCharges","Web.JobOrderLineCharges","/TaxCalculation/GetOHeaderChargeForEdit");
            }
        });

        $(document).ready(function(){
            enableModalTransitions();
        })



        var IsSaved=false;
        var ValidationCount=0;
        var CostCenterUnique='@Model.JobOrderSettings.isUniqueCostCenter';

        $('form').submit(function(event){

            if(!IsSaved)
            {
                if(!ValidateData())
                {
                    return false;
                }
                IsSaved=true;
                return IsSaved;
            }
            else
            {
                return false;
            }


        });

        var id=@Model.JobOrderHeaderId;

        if(id>0)
        {
            $('#ProcessId').attr('readonly','true');
        }


        function ValidateData() {
            var DocId=@Model.JobOrderHeaderId;
            var TempValue;
            var ValidationMessage="";



            //Checking for dulicate key value
            if(DocId<=0)
            {
                TempValue= $('#DocNo').DuplicateCheckForCreate({ name: 'JobOrders', value: $('#DocNo').val(), doctype: $('#DocTypeId').val() });
                if (TempValue){ ValidationMessage=$('#DocNo').val() + " already exist <br />";}
            }
            else
            {
                TempValue = $('#DocNo').DuplicateCheckForEdit({ name: 'JobOrders', value: $('#DocNo').val(), doctype: $('#DocTypeId').val(),headerId:DocId });
                if (TempValue) {ValidationMessage+=$('#DocNo').val() + " already exist <br />";}
            }
            if(TempValue)
            {
                if($('#validationerrormsg').length==0){
                    $('.panel-info').filter(':eq(1)').before('<div class="alert alert-danger" role="alert" id="validationerrormsg">'+ValidationMessage+'</div>');}
                else
                {
                    $('#validationerrormsg').html(ValidationMessage);
                }
            }

            return  (ValidationMessage=="");

        }


        $('#CostCenterName').change(function(){
            var disv=$(this);
            if( $('#JobWorkerId').val() && $('#JobWorkerId').val() > 0 && ValidateCostCenter(disv) )
            {

            }
            else
            {

            }
        })

        function ValidateCostCenter(thisv) {
            var DocId=@Model.JobOrderHeaderId;
            var TempValue;
            var ValidationMessage="";

            //if(CostCenterUnique=="True")
            //{


            $.ajax({
                url:'/JobOrderHeader/ValidateCostCenter',
                data:{DocTypeId:$('#DocTypeId').val(),CostCenterName:thisv.val(),HeaderId:$('#JobOrderHeaderId').val(),JobWorkerId:$('#JobWorkerId').val()},
                async:false,
                success:function(data)
                {
                    ValidationMessage=data;
                }
            });

            if(ValidationMessage)
            {
                if($('#csvalidationerrormsg').length==0){
                    $('.panel-info').filter(':eq(1)').before('<div class="alert alert-danger" role="alert" id="csvalidationerrormsg">'+ValidationMessage+'</div>');}
                else
                {
                    $('#csvalidationerrormsg').html(ValidationMessage);
                }
            }
            else
            {
                $('#csvalidationerrormsg').remove();
            }

            return  (ValidationMessage=="");

        }


    </script>

}


<script type="text/javascript">


    $(document).ready(function () {
        var id=@Model.JobOrderHeaderId;
        if(id==null||id==0)
        {
            $(document).find('a#btnCreateF').removeAttr('href').removeAttr('data-modal');
            $(document).find('a#btnCreate').removeAttr('href').removeAttr('data-modal');
            $(document).find('a#btnCreatePO').removeAttr('href').removeAttr('data-modal');
        }

        $(document).ajaxStart(function () {
            if ($(':submit', 'div.modal-content').length)
                $(':submit', 'div.modal-content').attr("disabled", 'disabled');
            return;
        });

        $(document).ajaxStop(function () {
            if ($(':submit', 'div.modal-content').length)
                $(':submit', 'div.modal-content').removeAttr("disabled");
            return;
        });

        if('@Model.JobOrderSettings.isMandatoryProductUID'=="True")
            $(document).find('a#btnCreateF').removeAttr('href').removeAttr('data-modal').attr("disabled","disabled");

        CustomSelectFunction($("#JobWorkerId"), '/JobOrderHeader/GetCustomPerson', '/ComboHelpList/SetSinglePerson', ' ', false, 0,$('#DocTypeId').val());
        CustomSelectFunction($("#MachineId"), '/ComboHelpList/GetMachine', '/ComboHelpList/SetSingleMachine', ' ', false, 0);
        CustomSelectFunction($("#BillToPartyId"), '/JobOrderHeader/GetCustomPerson', '/ComboHelpList/SetSinglePerson', ' ', false, 0,$('#DocTypeId').val());
        CustomSelectFunction($("#OrderById"), '/ComboHelpList/GetEmployeeWithProcess', '/ComboHelpList/SetSingleEmployee', ' ', false, 0, $('#ProcessId').val());
        CustomSelectFunction($("#GodownId"), '/ComboHelpList/GetGodown', '/ComboHelpList/SetSingleGodown', ' ', false, 0);
        CustomSelectFunction($("#DeliveryTermsId"), '/ComboHelpList/GetDeliveryTerms', '/ComboHelpList/SetSingleDeliveryTerm', ' ', false, 0);
        CustomSelectFunction($("#ShipToAddressId"), '/ComboHelpList/GetAddresses', '/ComboHelpList/SetSingleAddress', ' ', false, 0);
        CustomSelectFunction($("#CurrencyId"), '/ComboHelpList/GetCurrencies', '/ComboHelpList/SetSingleCurrency', ' ', false, 0);
        CustomSelectFunction($("#SalesTaxGroupPersonId"), '/ComboHelpList/GetSalesTaxGroupPerson', '/ComboHelpList/SetSingleSalesTaxGroupPerson', ' ', false, 0);
        CustomSelectFunction($("#ShipMethodId"), '/ComboHelpList/GetShipMethods', '/ComboHelpList/SetSingleShipMethod', ' ', false, 0);
        CustomSelectFunction($("#DocumentShipMethodId"), '/ComboHelpList/GetDocumentShipMethods', '/ComboHelpList/SetSingleDocumentShipMethod', ' ', false, 0);
        CustomSelectFunction($("#TransporterId"), '/ComboHelpList/GetTransporters', '/ComboHelpList/SetSinglePerson', ' ', false, 0);
        CustomSelectFunction($("#ReasonId"), '/ComboHelpList/GetReason', '/ComboHelpList/SetSingleReason', ' ', false, 0, $('#DocTypeId').val());
        CustomSelectFunction($("#AgentId"), '/ComboHelpList/GetAgents', '/ComboHelpList/SetSinglePerson', ' ', false, 0);
        CustomSelectFunction($("#FinancierId"), '/ComboHelpList/GetFinanciers', '/ComboHelpList/SetSinglePerson', ' ', false, 0, $('#ProcessId').val());
        CustomSelectFunction($("#SalesExecutiveId"), '/ComboHelpList/GetSalesExecutives', '/ComboHelpList/SetSinglePerson', ' ', false, 0);
        CustomSelectFunction($("#ProcessId"), '/ComboHelpList/GetProcessWithChildProcess', '/ComboHelpList/SetSingleProcess', ' ', false,0, $('#JobOrderSettings_ProcessId').val());


        $("#ProcessId").change(function(){
            CustomSelectFunction($("#OrderById"), '/ComboHelpList/GetEmployeeWithProcess', '/ComboHelpList/SetSingleEmployee', ' ', false, 0, $('#ProcessId').val());
            CustomSelectFunctionWithMultipleFilters($("#JobWorkerId"), '/JobOrderHeader/GetCustomPerson_WithProcess', '/ComboHelpList/SetSinglePerson', ' ', false, 0,$('#DocTypeId').val(),$('#ProcessId').val());
        });

        if ($("#ProcessId").is(":hidden") == false)
        {
            $('#ProcessId').select2('focus');
        }
        else{
            $('#JobWorkerId').select2('focus');
        }


        //Calling the function to load the table data/ Line information
        LoadProducts();

        //Adding Hidden Input Fields
        AddFields();

        //Calling the function to load Consumption Details
        LoadConsumption();

        if('@Model.JobOrderSettings.isAllowedToMaterialIssue'=="True")
        {
            LoadMaterialIssue();
        }


        var id=@Model.JobOrderHeaderId;
        var CalculationFooterChargeCount='@Model.CalculationFooterChargeCount';
        if (CalculationFooterChargeCount > 0)
        {
            LoadNewCharges(id,"Web.JobOrderHeaderCharges","Web.JobOrderLineCharges","/TaxCalculation/GetJOHeaderChargeForEdit");
        }
    });




    function LoadProducts() {

        var groupId=@Model.JobOrderHeaderId;
        var status='@Model.Status';

        var link="/JobOrderLine/_Index/";

        $.ajax({
            url: link,
            type: "GET",
            data:{id:groupId,status:status},
            success: function (data) {
                $("#gbody").html(data);
            },
            error: function (result) {
                alert("Error");
            }
        });
    };


    function LoadConsumption() {
        var groupId=@Model.JobOrderHeaderId;
        var link="/JobOrderLine/ConsumptionIndex/"+groupId;
        var QtyCount=0;
        var DealQtyCount=0;
        var AmountCount=0;
        var unit=true;
        var dunit=true;
        var prevunit;
        var prevdunit;
        var decimal=0;
        var DUdecimal=0;
        $.ajax({
            url: link,
            type: "GET",
            success: function (data) {
                var row = ""
                var srno=1;

                if(data.length!=0)
                {
                    $.each(data, function (index, item) {
                        row += " <div class='row crow grid-body' style='margin-left:0px;margin-right:0px'>"
                            +"      <div class='row-index block'  style='width:5%'>"+srno+"<input type='hidden' class='id' value='"+item.JobOrderLineId+"' /></div>"
                            +"          <div class='block'  style='width:90%'>"
                            +"              <div class='row'>"
                            +"                   <div class='block' style='width:60%'>"+(item.ProductName==null?" ":"<strong>"+item.ProductName+"</strong>")
                            +"                           <div>"+(item.Dimension1Name==null?" ":item.Dimension1Name+",")+(item.Dimension2Name==null?" ":item.Dimension2Name)+(item.Dimension3Name==null?" ":item.Dimension3Name)+(item.Dimension4Name==null?" ":item.Dimension4Name)+"</div>"
                            +"                   </div>"
                            +"                  <div class='text-right block'  style='width:25%'>"+(item.Qty==null?" ":item.Qty.toFixed(item.UnitDecimalPlaces))+"<br />"
                            +"                   </div>"
                            +"                   <div class='block'  style='width:15%'>"+(item.UnitName==null?" ":item.UnitName)
                            +"                   </div>"
                            +"              </div>"
                            +"          </div>"
                            +"      <div class='block'  style='width:5%'><a class='glyphicon glyphicon-trash icon-Cus-Size' data-modal data-detailDisabled='true' delete='' href='/JobOrderLine/_Edit/"+item.JobOrderLineId+"'></a>"
                            +"      </div>"
                            +"  </div>"
                            +"<hr style='margin-top:0px;margin-bottom:0px'/>";
                        QtyCount+=item.Qty;
                        if(srno!=1)
                        {
                            if(item.UnitName==prevunit && unit!=false)
                            {}
                            else
                            {unit=false;}
                        }

                        if(decimal- parseInt(item.UnitDecimalPlaces) < 0){decimal=item.UnitDecimalPlaces;}
                        srno++;
                        prevunit=item.UnitName;
                    });
                    row+="<div class='row tfooter' style='padding-top:10px;margin-left:0px;margin-right:0px'>"
                        +"  <div class='block' style='width:5%'>"
                        +"  </div>"
                        +"  <div class='block' style='width:90%'>"
                        +"      <div class='row'> "
                        +"          <div class='block'  style='width:30%'><strong>Total</strong></div>"
                        +"          <div class='block' style='width:20%'>"
                        +"          </div>"
                        +"          <div class='block text-right' style='width:20%'><strong>"
                        +               "</strong>"
                        +"          </div>"
                        +"          <div class='block text-right' style='width:15%'><strong>"
                        +              (QtyCount.toFixed(decimal))+"</strong>"
                        +"          </div>"
                        +"          <div class='block' style='width:15%'><strong>"
                        +               ((unit==true)?prevunit:"")+"</strong>"
                        +"          </div>"
                        +"      </div>"
                        +"  </div>"
                        +"  <div class='block'  style='width:5%'>"
                        +"  </div>"
                        +"</div>"
                }
                else
                {
                    ;
                }
                $("#gbodyconsumption").html(row);

            },
            error: function (result) {
                alert("Error");
            }
        });
    };


    function LoadMaterialIssue() {
        var SelectedRecord='@ViewBag.DocLineId';
        var groupId=@Model.JobOrderHeaderId;
        var status=@Model.Status;
        var LineEditUrl;
        var LineDeleteUrl;
        if(status==StatusContstantsEnum.Drafted||status==StatusContstantsEnum.Import)
        {
            LineEditUrl="/MaterialIssueForJobOrder/_ModifyLine/";
            LineDeleteUrl="/MaterialIssueForJobOrder/_DeleteLine/";
        }
        else if(status==StatusContstantsEnum.Submitted || status == StatusContstantsEnum.Modified )
        {
            LineEditUrl="/MaterialIssueForJobOrder/_ModifyLineAfterSubmit/";
            LineDeleteUrl="/MaterialIssueForJobOrder/_DeleteLine_AfterSubmit/";
        }
        else
        {
            LineEditUrl="/MaterialIssueForJobOrder/_Detail/";
            LineDeleteUrl="/MaterialIssueForJobOrder/_Detail/";
        }

        var link="/MaterialIssueForJobOrder/Index/"+groupId;
        var QtyCount=0;
        var DealQtyCount=0;
        var AmountCount=0;
        var unit=true;
        var dunit=true;
        var prevunit;
        var prevdunit;
        var decimal=0;
        var DUdecimal=0;
        $.ajax({
            url: link,
            type: "GET",
            success: function (data) {
                var row = ""
                var srno=1;

                if(data.length!=0)
                {
                    $.each(data, function (index, item) {
                        row += " <div class='row crow grid-body' style='margin-left:0px;margin-right:0px'id='"+item.StockLineId+"'>"
                            +"      <div class='row-index block'  style='width:5%'>"+srno+"<input type='hidden' class='id' value='"+item.StockLineId+"' /></div>"
                            +"          <div class='block'  style='width:90%'>"
                            +"              <div class='row'>"
                            +"                   <div class='block' style='width:60%'>"+(item.ProductName==null?" ":"<strong>"+item.ProductName+"</strong>")
                            +"                           <div>"+(item.Dimension1Name==null?" ":item.Dimension1Name+",")+(item.Dimension2Name==null?" ":item.Dimension2Name)+(item.Dimension3Name==null?" ":item.Dimension3Name)+(item.Dimension4Name==null?" ":item.Dimension4Name)+"</div>"
                            +"                   </div>"
                            +"                  <div class='text-right block'  style='width:25%'>"+(item.Qty==null?" ":item.Qty.toFixed(item.UnitDecimalPlaces))+"<br />"
                            +"                   </div>"
                            +"                   <div class='block'  style='width:15%'>"+(item.UnitName==null?" ":item.UnitName)
                            +"                   </div>"
                            +"                   <div class='block'  style='width:20%'>"+(item.LotNo==null?" ":"Lot-No:"+item.LotNo+"<br />")+(item.LossPer==null?" ":"Loss %:"+item.LossPer+"<br />")+(item.Remark==null?" ":item.Remark)
                            +"                   </div>"
                            +"              </div>"
                            +"          </div>"
                            +"      <div class='block'  style='width:5%'><a class='glyphicon glyphicon-trash icon-Cus-Size' data-modal='' data-detailDisabled='true' delete='' href='"+LineDeleteUrl+item.StockLineId+"'></a>"
                            +"          <a  edit='' href='"+LineEditUrl+item.StockLineId+"'></a>"
                            +"      </div>"
                            +"  </div>"
                            +"<hr style='margin-top:0px;margin-bottom:0px'/>";
                        QtyCount+=item.Qty;
                        if(srno!=1)
                        {
                            if(item.UnitName==prevunit && unit!=false)
                            {}
                            else
                            {unit=false;}
                        }

                        if(decimal- parseInt(item.UnitDecimalPlaces) < 0){decimal=item.UnitDecimalPlaces;}
                        srno++;
                        prevunit=item.UnitName;
                    });
                    row+="<div class='row tfooter' style='padding-top:10px;margin-left:0px;margin-right:0px'>"
                        +"  <div class='block' style='width:5%'>"
                        +"  </div>"
                        +"  <div class='block' style='width:90%'>"
                        +"      <div class='row'> "
                        +"          <div class='block'  style='width:30%'><strong>Total</strong></div>"
                        +"          <div class='block' style='width:20%'>"
                        +"          </div>"
                        +"          <div class='block text-right' style='width:20%'><strong>"
                        +               "</strong>"
                        +"          </div>"
                        +"          <div class='block text-right' style='width:15%'><strong>"
                        +              (QtyCount.toFixed(decimal))+"</strong>"
                        +"          </div>"
                        +"          <div class='block' style='width:15%'><strong>"
                        +               ((unit==true)?prevunit:"")+"</strong>"
                        +"          </div>"
                        +"      </div>"
                        +"  </div>"
                        +"  <div class='block'  style='width:5%'>"
                        +"  </div>"
                        +"</div>"
                }
                else
                {

                }

                $("#gbodyMaterialIssue").html(row);
                if(SelectedRecord && SelectedRecord!=0)
                {
                    var Id="#"+SelectedRecord
                    NavigateToLineRecord(Id);
                }
            },
            error: function (result) {
                alert("Error");
            }
        });
    };

    $("#JobWorkerId").change(GetJobWorkerDetail);

    function GetJobWorkerDetail() {
        var ProcessProgress = $("#Product detail loading progress");
        ProcessProgress.show();
        if ($("#JobWorkerId").val() != 0 && $("#JobWorkerId").val() != null) {
            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("GetJobWorkerDetailJson"))",
                data: { JobWorkerId: $("#JobWorkerId").val() },
                success: function (data) {
                    $("#CreditDays").val(data.CreaditDays);
                    if (data.SalesTaxGroupPartyId != null)
                    {
                        $("#SalesTaxGroupPersonId").select2('data', { id: data.SalesTaxGroupPartyId, text: data.SalesTaxGroupPartyName});
                    }

                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve product details.' + thrownError);
                }
            });
        }}


    $("#ProcessId").change(GetProcessPermission);

    function GetProcessPermission() {
        var ProcessProgress = $("#Product detail loading progress");
        ProcessProgress.show();
        if ($("#ProcessId").val() != 0 && $("#ProcessId").val() != null) {
            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("GetProcessPermissionJson"))",
                data: { DocTypeId : $("#DocTypeId").val(), ProcessId: $("#ProcessId").val() },
                success: function (data) {
                    if (data == false)
                    {
                        var ProcessName = $("#ProcessId").select2('data').text;
                        $('.panel-info').filter(':eq(1)').before('<div class="alert alert-danger" role="alert" id="validationerrormsg">'+'You do not have permission for '+ ProcessName +'.'+'</div>');
                        $("#ProcessId").select2('data', { id: '', text: ''});
                    }
                    else{
                        $('#validationerrormsg').remove();
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve product details.' + thrownError);
                }
            });
        }}


</script>


@if ((ViewBag.Mode != "Add") && (ViewBag.Mode != "Edit"))
{
    <script type="text/javascript">

        $(document).ready(function(){
            DisablePageNavigation();
        })

    </script>
}

@if ((Model.Status == (int)ActivityTypeContants.Modified || Model.Status == (int)ActivityTypeContants.Submitted)
    && (ViewBag.transactionType == "submit" || ViewBag.transactionType == "submitContinue" || ViewBag.transactionType == "review" || ViewBag.transactionType == "ReviewContinue"))
{
    <script type="text/javascript">

        var GatePassGen='@Model.JobOrderSettings.SqlProcGatePass'
        var GatePassId='@Model.GatePassHeaderId'
        var TrancType='@ViewBag.transactionType'

        $(document).ready(function(){
            enableActivityLogReason(GatePassGen,GatePassId,TrancType);
        })


    </script>
}
else if (Model.GatePassHeaderId == null && (ViewBag.transactionType == "submit" || ViewBag.transactionType == "submitContinue") && !string.IsNullOrEmpty(Model.JobOrderSettings.SqlProcGatePass))
{
    <script type="text/javascript">


        $(document).ready(function(){
            prompGatePassGeneration();
        })

 
    </script>
}


@if (ViewBag.transactionType != null && (ViewBag.transactionType == "submitContinue" || ViewBag.transactionType == "ReviewContinue"))
{
    <script type="text/javascript">

        $(document).ready(function(){
            CreateTrasitionEffect();
        })

    </script>
}